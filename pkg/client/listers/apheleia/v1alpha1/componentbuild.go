/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/stuartwdouglas/apheleia/pkg/apis/apheleia/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComponentBuildLister helps list ComponentBuilds.
// All objects returned here must be treated as read-only.
type ComponentBuildLister interface {
	// List lists all ComponentBuilds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ComponentBuild, err error)
	// ComponentBuilds returns an object that can list and get ComponentBuilds.
	ComponentBuilds(namespace string) ComponentBuildNamespaceLister
	ComponentBuildListerExpansion
}

// componentBuildLister implements the ComponentBuildLister interface.
type componentBuildLister struct {
	indexer cache.Indexer
}

// NewComponentBuildLister returns a new ComponentBuildLister.
func NewComponentBuildLister(indexer cache.Indexer) ComponentBuildLister {
	return &componentBuildLister{indexer: indexer}
}

// List lists all ComponentBuilds in the indexer.
func (s *componentBuildLister) List(selector labels.Selector) (ret []*v1alpha1.ComponentBuild, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComponentBuild))
	})
	return ret, err
}

// ComponentBuilds returns an object that can list and get ComponentBuilds.
func (s *componentBuildLister) ComponentBuilds(namespace string) ComponentBuildNamespaceLister {
	return componentBuildNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComponentBuildNamespaceLister helps list and get ComponentBuilds.
// All objects returned here must be treated as read-only.
type ComponentBuildNamespaceLister interface {
	// List lists all ComponentBuilds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ComponentBuild, err error)
	// Get retrieves the ComponentBuild from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ComponentBuild, error)
	ComponentBuildNamespaceListerExpansion
}

// componentBuildNamespaceLister implements the ComponentBuildNamespaceLister
// interface.
type componentBuildNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComponentBuilds in the indexer for a given namespace.
func (s componentBuildNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComponentBuild, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComponentBuild))
	})
	return ret, err
}

// Get retrieves the ComponentBuild from the indexer for a given namespace and name.
func (s componentBuildNamespaceLister) Get(name string) (*v1alpha1.ComponentBuild, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("componentbuild"), name)
	}
	return obj.(*v1alpha1.ComponentBuild), nil
}
